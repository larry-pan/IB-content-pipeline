{"messages":[{"role":"System","content":"You are an assistant that generates IB-style Computer Science questions and markschemes. Topics and subtopics are:\nSystem Fundamentals: Systems in organizations, System design basics\nComputer Organization: Computer organization\nNetworks:\nNetworks\nComputational Thinking, Problem-solving and Programming: General principles, Connecting computational thinking and program design, \nIntroduction to programming  \nAbstract Data Structures: Abstract data structures \nResource Management:\nResource management  \nControl: Control\nEach subquestion may test different topics than the main topic, so combine different topics. All coding questions should be in pseudocode. You will generate a JSON object containing the string 'question' and the list called 'options', where each element is a subquestion. Each sub-question must have:\n  - 'question': General info that introduces the subquestions.\n  - 'content': a clear and challenging question string that tests of one or more\n  - 'marks': how many marks the question is worth, with more marks for questions requiring deeper analysis or discussion.\n  - 'markscheme': an IB-style markscheme string that shows acceptable answers with mark allocations in the format 'Award [X max]' followed by bullet points of acceptable responses, using semicolons to separate alternative answers and including specific technical terminology.\n  - 'subtopics': a list of relevant subtopics that the subquestion covers."},{"role":"User","content":"System Fundamentals"},{"role":"Chatbot","content":"topic: Systems in organizations\nparts: [{\"content\": \"State two characteristics of an embedded system.\", \"marks\": 2, \"markscheme\": \"Award [2 max]\\nDedicated to a specific function/task;\\nIntegrated into a larger system;\\nReal-time operation/processing;\\nResource constrained (memory, processing power);\\nNot user-programmable/limited user interface;\\nReliable operation in harsh environments;\\n[2]\", \"subtopics\": [\"Systems in organizations\"], \"order\": 1}, {\"content\": \"Explain how a distributed system differs from a centralized system in terms of processing and data storage.\", \"marks\": 4, \"markscheme\": \"Award [4 max]\\nDistributed system:\\nProcessing is spread across multiple computers/nodes;\\nData is stored in multiple locations/servers;\\nCentralized system:\\nProcessing occurs on a single main computer/server;\\nData is stored in one central location/database;\\nComparison points:\\nDistributed systems offer better fault tolerance;\\nCentralized systems are easier to manage and secure;\\n[4]\", \"subtopics\": [\"Systems in organizations\"], \"order\": 2}, {\"content\": \"Discuss the advantages and disadvantages of implementing a new information system to replace a legacy system in a large organization.\", \"marks\": 6, \"markscheme\": \"Award [6 max]\\nAdvantages:\\nImproved functionality and features;\\nBetter integration with modern systems;\\nEnhanced security and compliance;\\nImproved user experience and interface;\\nReduced maintenance costs over time;\\nBetter performance and reliability;\\nDisadvantages:\\nHigh implementation costs;\\nStaff training requirements;\\nPotential data migration issues;\\nTemporary disruption to business operations;\\nRisk of implementation failure;\\nResistance to change from users;\\nConcluding statements:\\nCareful planning and phased implementation can mitigate risks;\\nLong-term benefits often outweigh short-term costs;\\n[6]\", \"subtopics\": [\"Systems in organizations\", \"System design basics\"], \"order\": 3}]"},{"role":"User","content":"Computer Organization"},{"role":"Chatbot","content":"topic: Computer organization\nparts: [{\"content\": \"State the function of the control unit in a CPU.\", \"marks\": 1, \"markscheme\": \"Award [1 max]\\nControls the execution of instructions;\\nCoordinates the activities of the CPU components;\\nDecodes instructions;\\nGenerates control signals;\\n[1]\", \"subtopics\": [\"Computer organization\"], \"order\": 1}, {\"content\": \"Explain the fetch-decode-execute cycle, identifying the role of each major CPU component.\", \"marks\": 5, \"markscheme\": \"Award [5 max]\\nFetch:\\nProgram counter contains address of next instruction;\\nInstruction is retrieved from memory;\\nDecode:\\nControl unit interprets/decodes the instruction;\\nDetermines what operation to perform;\\nExecute:\\nALU performs arithmetic/logical operations if required;\\nResults stored in registers or memory;\\nProgram counter updated to next instruction;\\n[5]\", \"subtopics\": [\"Computer organization\"], \"order\": 2}, {\"content\": \"Compare the characteristics and use cases of RAM and ROM in computer systems.\", \"marks\": 4, \"markscheme\": \"Award [4 max]\\nRAM characteristics:\\nVolatile memory/loses data when power off;\\nRead and write operations possible;\\nFaster access times;\\nUsed for temporary storage/running programs;\\nROM characteristics:\\nNon-volatile memory/retains data without power;\\nRead-only or limited write capability;\\nSlower access than RAM;\\nUsed for firmware/boot instructions/BIOS;\\n[4]\", \"subtopics\": [\"Computer organization\"], \"order\": 3}]"},{"role":"User","content":"Networks"},{"role":"Chatbot","content":"topic: Networks\nparts: [{\"content\": \"State one advantage of using a mesh topology over a star topology.\", \"marks\": 1, \"markscheme\": \"Award [1 max]\\nBetter fault tolerance/redundancy;\\nMultiple paths for data transmission;\\nNo single point of failure;\\nCan handle higher traffic loads;\\n[1]\", \"subtopics\": [\"Networks\"], \"order\": 1}, {\"content\": \"Explain how the TCP protocol ensures reliable data transmission over a network.\", \"marks\": 4, \"markscheme\": \"Award [4 max]\\nUses acknowledgment messages to confirm receipt;\\nSequence numbers ensure packets arrive in correct order;\\nRetransmission of lost or corrupted packets;\\nFlow control prevents overwhelming the receiver;\\nError checking using checksums;\\nConnection-oriented protocol establishes communication;\\n[4]\", \"subtopics\": [\"Networks\"], \"order\": 2}, {\"content\": \"Compare the security implications of using wired versus wireless networks in a business environment.\", \"marks\": 5, \"markscheme\": \"Award [5 max]\\nWired networks:\\nPhysically more secure/harder to intercept;\\nRequire physical access to compromise;\\nEasier to monitor and control access;\\nWireless networks:\\nSignals can be intercepted remotely;\\nSusceptible to unauthorized access;\\nRequire encryption protocols (WPA2/WPA3);\\nVulnerable to rogue access points;\\nGeneral security measures:\\nBoth require proper authentication;\\nFirewalls and intrusion detection needed;\\n[5]\", \"subtopics\": [\"Networks\"], \"order\": 3}]"},{"role":"User","content":"Computational Thinking, Problem-solving and Programming"},{"role":"Chatbot","content":"topic: Introduction to programming\nparts: [{\"content\": \"Identify the two main components of a loop structure.\", \"marks\": 2, \"markscheme\": \"Award [2 max]\\nCondition/test;\\nBody/statements to execute;\\nNote: Accept initialization and increment for specific loop types\\n[2]\", \"subtopics\": [\"Introduction to programming\"], \"order\": 1}, {\"content\": \"Construct a pseudocode algorithm that reads 10 integers and outputs only the even numbers.\", \"marks\": 4, \"markscheme\": \"Award [4 max]\\nAward [1] for correct loop structure with 10 iterations\\nAward [1] for input statement inside loop\\nAward [1] for correct condition to check even numbers (modulo 2 = 0)\\nAward [1] for output statement\\nExample:\\nloop COUNTER from 1 to 10\\n  NUMBER = input()\\n  if NUMBER mod 2 = 0 then\\n    output NUMBER\\n  end if\\nend loop\\n[4]\", \"subtopics\": [\"Introduction to programming\", \"General principles\"], \"order\": 2}, {\"content\": \"Explain how decomposition as a computational thinking technique helps in solving complex programming problems.\", \"marks\": 3, \"markscheme\": \"Award [3 max]\\nBreaks down complex problems into smaller sub-problems;\\nMakes problems more manageable and easier to understand;\\nAllows different parts to be solved independently;\\nEnables reuse of solutions for similar sub-problems;\\nFacilitates team development/division of work;\\nEasier to test and debug individual components;\\n[3]\", \"subtopics\": [\"General principles\", \"Connecting computational thinking and program design\"], \"order\": 3}]"},{"role":"User","content":"Abstract Data Structures"},{"role":"Chatbot","content":"topic: Abstract data structures\nparts: [{\"content\": \"State the principle that governs data access in a stack.\", \"marks\": 1, \"markscheme\": \"Award [1 max]\\nLast In First Out (LIFO);\\nLast In Last Out (LILO);\\n[1]\", \"subtopics\": [\"Abstract data structures\"], \"order\": 1}, {\"content\": \"Explain the difference between static and dynamic data structures, giving one example of each.\", \"marks\": 4, \"markscheme\": \"Award [4 max]\\nStatic data structures:\\nFixed size determined at compile time;\\nMemory allocated when program starts;\\nExample: array;\\nDynamic data structures:\\nSize can change during program execution;\\nMemory allocated/deallocated as needed;\\nExample: linked list/stack/queue/tree;\\n[4]\", \"subtopics\": [\"Abstract data structures\"], \"order\": 2}, {\"content\": \"Compare the advantages and disadvantages of using arrays versus linked lists for storing a collection of student records.\", \"marks\": 6, \"markscheme\": \"Award [6 max]\\nArrays advantages:\\nDirect access to elements using index/random access;\\nSimple implementation and memory layout;\\nBetter cache performance/memory locality;\\nArrays disadvantages:\\nFixed size/difficult to resize;\\nInsertion and deletion require shifting elements;\\nLinked lists advantages:\\nDynamic size/can grow and shrink;\\nEfficient insertion and deletion;\\nLinked lists disadvantages:\\nSequential access only/no random access;\\nExtra memory overhead for pointers;\\nPoor cache performance;\\n[6]\", \"subtopics\": [\"Abstract data structures\"], \"order\": 3}]"},{"role":"User","content":"Resource Management"},{"role":"Chatbot","content":"topic: Resource management\nparts: [{\"content\": \"State one function of an operating system related to memory management.\", \"marks\": 1, \"markscheme\": \"Award [1 max]\\nAllocates memory to programs/processes;\\nDeallocates memory when programs finish;\\nPrevents programs from accessing each other's memory;\\nManages virtual memory/paging;\\nHandles memory protection;\\n[1]\", \"subtopics\": [\"Resource management\"], \"order\": 1}, {\"content\": \"Explain how a scheduler in an operating system manages multiple processes competing for CPU time.\", \"marks\": 4, \"markscheme\": \"Award [4 max]\\nMaintains a queue of ready processes;\\nUses scheduling algorithms (round-robin, priority-based, etc.);\\nAllocates CPU time slices to processes;\\nSwitches between processes (context switching);\\nHandles process states (running, waiting, ready);\\nEnsures fair distribution of CPU resources;\\n[4]\", \"subtopics\": [\"Resource management\"], \"order\": 2}, {\"content\": \"Discuss the trade-offs between different memory management techniques in modern operating systems.\", \"marks\": 5, \"markscheme\": \"Award [5 max]\\nPaging:\\nAdvantages: eliminates external fragmentation, allows virtual memory;\\nDisadvantages: internal fragmentation, page table overhead;\\nSegmentation:\\nAdvantages: logical organization, variable size segments;\\nDisadvantages: external fragmentation, complex memory allocation;\\nVirtual memory:\\nAdvantages: programs larger than physical memory, memory protection;\\nDisadvantages: performance overhead, complex implementation;\\nConcluding points:\\nModern systems often combine techniques;\\nChoice depends on system requirements and constraints;\\n[5]\", \"subtopics\": [\"Resource management\"], \"order\": 3}]"},{"role":"User","content":"Control"},{"role":"Chatbot","content":"topic: Control\nparts: [{\"content\": \"State one input device commonly used in automated control systems.\", \"marks\": 1, \"markscheme\": \"Award [1 max]\\nSensor;\\nThermometer/temperature sensor;\\nLight sensor/photoresistor;\\nMotion sensor/PIR sensor;\\nPressure sensor;\\nProximity sensor;\\n[1]\", \"subtopics\": [\"Control\"], \"order\": 1}, {\"content\": \"Explain how a feedback loop enables a control system to maintain a desired output.\", \"marks\": 4, \"markscheme\": \"Award [4 max]\\nSensor measures the actual output/current state;\\nActual output is compared with desired output/setpoint;\\nDifference/error is calculated;\\nControl system adjusts input based on the error;\\nProcess continues until actual output matches desired output;\\nSystem continuously monitors and adjusts;\\n[4]\", \"subtopics\": [\"Control\"], \"order\": 2}, {\"content\": \"Construct a pseudocode algorithm for a simple thermostat that maintains room temperature between 20°C and 22°C using a heater and sensor.\", \"marks\": 5, \"markscheme\": \"Award [5 max]\\nAward [1] for continuous loop structure\\nAward [1] for reading temperature from sensor\\nAward [1] for correct condition to turn heater on\\nAward [1] for correct condition to turn heater off\\nAward [1] for appropriate delay/wait\\nExample:\\nloop\\n  TEMP = read_sensor()\\n  if TEMP < 20 then\\n    turn_on_heater()\\n  end if\\n  if TEMP > 22 then\\n    turn_off_heater()\\n  end if\\n  wait(1_second)\\nend loop\\n[5]\", \"subtopics\": [\"Control\"], \"order\": 3}]"}]}